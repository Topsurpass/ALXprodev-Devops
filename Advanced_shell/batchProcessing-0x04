#!/bin/bash

# List of Pokémon for parallel processing
POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon" "InvalidPokemon")

# Directory to save the data files
DATA_DIR="pokemon_data"

# Create the data directory if it doesn't exist
mkdir -p "$DATA_DIR"

# Maximum number of retries
MAX_RETRIES=3

# Delay to avoid rate-limiting issues
DELAY=1

# Function to fetch Pokémon data with error handling
fetch_pokemon_data() {
    POKEMON=$1
    POKEMON_LOWER=$(echo "$POKEMON" | awk '{print tolower($0)}')
    DATA_FILE="$DATA_DIR/${POKEMON_LOWER}.json"

    echo "Fetching data for $POKEMON in the background..."

    RETRY_COUNT=0
    SUCCESS=false

    # Retry logic
    while [ "$RETRY_COUNT" -lt "$MAX_RETRIES" ]; do
        RESPONSE=$(curl -s -w "%{http_code}" -o "$DATA_FILE" "https://pokeapi.co/api/v2/pokemon/$POKEMON_LOWER")
        HTTP_STATUS="${RESPONSE:(-3)}"

        if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "✅ Data for $POKEMON has been saved to $DATA_FILE."
            SUCCESS=true
            break
        elif [ "$HTTP_STATUS" -eq 404 ]; then
            echo "❌ Error: $POKEMON not found. Skipping..."
            echo "$(date): Error - $POKEMON not found (HTTP $HTTP_STATUS)" >> "$DATA_DIR/errors.txt"
            rm -f "$DATA_FILE"
            break
        else
            ((RETRY_COUNT++))
            echo "⚠️ Attempt $RETRY_COUNT failed for $POKEMON. Retrying..."
            sleep "$DELAY"
        fi
    done

    if [ "$SUCCESS" = false ] && [ "$HTTP_STATUS" != "404" ]; then
        echo "❌ Failed to fetch data for $POKEMON after $MAX_RETRIES attempts."
        echo "$(date): Failed to fetch data for $POKEMON after $MAX_RETRIES attempts." >> "$DATA_DIR/errors.txt"
    fi
}

# Fetch all Pokémon in parallel using background processes
for POKEMON in "${POKEMON_LIST[@]}"; do
    fetch_pokemon_data "$POKEMON" &
done

# Wait for all background processes to finish
echo "⏳ Waiting for all background tasks to complete..."
wait

# Check if any jobs are still running
if jobs -p | grep -q .; then
    echo "⚠️ Some jobs are still running. Attempting to terminate them..."
    kill $(jobs -p)
fi

echo "✅ All tasks have been completed!"
